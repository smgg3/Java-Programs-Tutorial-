Arrays
	which a fixed size sequential collection of elements of the same type.
Declare an array
	datatype[] array 
		or
	datatype array[]			//works but not preferred way
creating arrays
	datatype [] array=new datatype[size]
	it assigns the reference of newly created array to the array variable
Alternate way
	datatype[] array={value1,value2,value3,...}
	array elements are accessed through the index.
	index starts at 0 to array length-1
processing arrays
	forloop or for each loop because of same type of data
Passing arrays to methods
	printArray(new int[]{1,2,3,4,5});
	printArray(array)
Methods
	1.binarySearch()
	syntax
	public static int binarySearch(Object[] a, Object key)
	Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. The array must be sorted prior to
	making this call. This returns index of the search key, if it is contained in the list; otherwise, it returns ( – (insertion point + 1)).
	2.equals()
		syntax
			public static boolean equals(long[] a,long[] a2)
		Returns true if the two specified arrays of longs are equal to one another. Two arrays are considered equal if both arrays contain the same number of elements,
		and all corresponding pairs of elements in the two arrays are equal. This returns true if the two arrays are equal. Same method could be used by all other primitive data types (Byte, short, Int, etc.)
	3.sort()
		syntax
			public static void sort(Object[] a)
		Sorts the specified array of objects into an ascending order, according to the natural ordering of its elements. The same method could be used by all other primitive data types ( Byte, short, Int, etc.)
	4.fill()
		syntax
			public static void fill(int[] a,int val)
		Assigns the specified int value to each element of the specified array of ints. The same method could be used by all other primitive data types (Byte, short, Int, etc.)
		
	
	
	
	
	
	
	
	
	