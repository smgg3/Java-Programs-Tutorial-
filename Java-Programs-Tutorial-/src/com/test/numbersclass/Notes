Numbers Class
	In some situations we came across to use objects instead of primitive data types
	Java provides wrapper classes
	All wrapper classes are subclasses of the abstract class Number
Number
	Integer
	Float
	Short
	Long
	Double
	Byte
	is a part of java.lang package
Wrapper Class
	Object of the wrapper class contains or wraps primitive data type of its type
	converting primitive data types into object is called boxing or auto boxing and taken care by compiler
	so using we just need to pass primitive data type to wrapper class constructor
	we can convert wrapper class into primitive data type we call it as unboxing
Wrapper Class Methods
	1. XXXValue()
		returns wrapper class value in XXX primitive datatype format
		ex: Integer n=10;
		float f=n.floatValue();
		syntax
			byte byteValue()
	2.compareTo()
		returns 0 if equal
		returns 1 if a>b
		returns -1 if a<b
		syntax
			public int compareTo( NumberSubClass referenceName )
	3.equals()
		determines whether the number object invoking is equal to number object we are sending
		Syntax
			public boolean equals(Object o)
		returns true if object is os same type and same numeric value else false
	4.valueOF()
		valueOf(int i): This returns an Integer object holding the value of the specified primitive.	
		valueOf(String s): This returns an Integer object holding the value of the specified string representation.
		valueOf(String s, int radix): This returns an Integer object holding the integer value of the specified string representation, parsed with the value of radix.
	
		syntax
			static Integer valueOf(int i)
			static Integer valueOf(String s)
			static Integer valueOf(String s, int radix)
	5.toString()
		Syntax
			String toString()
			static String toString(int i)
		toString(): This returns a String object representing the value of thisInteger.
		toString(int i): This returns a String object representing the specified integer
	6. parseInt()
		Syntax
			static int parseInt(String s)
			static int parseInt(String s, int radix)
		parseInt(String s): This returns an integer (decimal only).
		parseInt(int i): This returns an integer, given a string representation of decimal, binary, octal, or hexadecimal (radix equals 10, 2, 8, or 16 respectively) numbers as input
	7.abs()
		Syntax
			double abs(double d)
			float abs(float f)
			int abs(int i)
			long abs(long lng)	
		This method Returns the absolute value of the argument.
		how to call 
			Math.abs(10.f)
	8.ceil()
		Syntax
			double ceil(double d)
			double ceil(float f)
		This method returns the smallest integer that is greater than or equal to the argument. Returned as a double.
		Math.ceil(10.3)
	9.floor()
		Syntax
			double floor(double d)
			double floor(float f)
		This method returns the largest integer that is less than or equal to the argument. Returned as a double.
		Math.floor(10.3)
	10.rint()
		Syntax
			double rint(double d)
		This method returns the integer that is closest in value to the argument. Returned as a double.
		Math.rint(10.5) returns 10.0
	11.round()
		Syntax
			long round(double d)
			int round(float f)
		This method returns the closest long or int, as indicated by the method's return type, to the argument.
		Math.round(10.5) returns 11
	12.min()
		Syntax
			double min(double arg1, double arg2)
			float min(float arg1, float arg2)
			int min(int arg1, int arg2)
			long min(long arg1, long arg2)
		This method returns the smaller of the two arguments.
	13.max()
		Syntax
			double max(double arg1, double arg2)
			float max(float arg1, float arg2)
			int max(int arg1, int arg2)
			long max(long arg1, long arg2)
		This method returns the maximum of the two arguments.
	14.exp()
		Syntax
			double exp(double d)
		This method returns the base of the natural logarithms, e, to the power of the argument			
	15.log()
		Syntax
			double log(double d)
		This method returns the natural logarithm of the argument.
	16.pow()
		syntax
			double pow(double base, double exponent)	
		This method returns the value of the first argument raised to the power of the second argument.
		Math.pow(1,3.0)
	17.sqrt()
		syntax
			double sqrt(double d)
		This method returns the square root of the argument.
	18.sin()
		syntax
			double sin(double d)
		This method returns the sine of the specified double value
		Math.sin(Math.toRadians(45))
	19.cos()
		syntax
			double cos(double d)
		This method returns the cosine of the specified double value.
		Math.cos(Math.toRadians(45))
	20.tan()
		syntax
			double tan(double d)
		This method returns the tangent of the specified double value.
		Math.tan(Math.toRadins(45))
	21.asin()
		syntax
			double asin(double d)
		This method returns the arcsine of the specified double value.
		Math.asin(Math.toRadians(45))
		Math.toDegrees(Math.asin(Math.sin(radians)))
	22.acos()
		syntax
			double acos(double d)
		This method returns the arccosine of the specified double value
		Math.acos(Math.toRadians(45))
		Math.toDegrees(Math.acos(Math.sin(radians)))
	23.atan()
		syntax
			double atan(double d)
		This method returns the arctangent of the specified double value.
		 Math.toDegrees(Math.atan(Math.sin(radians)))
	24.atan2()
		syntax
			double atan2(double y, double x)
		 This method returns theta from polar coordinate (r, theta)
		 Math.atan2(45,30)
	25.toDegrees()
		syntax
			double toDegrees(double d)
		This method returns a double value.
		Math.toDegrees(0.5)
	26.toRadians()
		syntax
			double toRadians(double d)
		This method returns a double value
		Math.toRadaians(45)
	27.random()
		The method is used to generate a random number between 0.0 and 1.0
		The range is: 0.0=< Math.random < 1.0
		syntax
			static double random()
		This method returns a double.
		Math.random();
		if we want to increase range use arithmetic operations 
		Math.random()*10  gives between 0 to 9